# Autogenerated runCitrus.R File
# Author: Robert Bruggner / bruggner@stanford.edu
# Compatible with Citrus version <%cat(templateData[["citrusVersion"]])%>

rm(list = ls())
library("citrus",lib.loc=<% if (is.null(templateData[["library"]])){
                              cat("NULL")
                            } else {
                              cat(paste("\"",templateData[["library"]],"\"",sep=""))
                            } %>)

# Use this line to limit the number of threads used by clustering
<%if (!templateData[["coreLimit"]]){cat("# ")}%>Rclusterpp.setThreads(<%cat(templateData[["analysisCores"]])%>);
options("mc.cores"=1);

family = "classification"

# Change if you want to run from command line
# dataDirectory = "../"
dataDirectory = <%cat(stringQuote(templateData[["dataDir"]]))%>

outputDirectory = <%cat("file.path(dataDirectory,\"citrusOutput\")")%>
clusteringColumns = c(<%cat(paste(sapply(templateData[["clusterCols"]],stringQuote),collapse=","))%>)
<% if ("medianColumns" %in% names(templateData)) {
cat(paste("medianColumns=c(",paste(sapply(templateData[["medianColumns"]],stringQuote),collapse=","),")\n",sep=""))
}%>
transformColumns = c(<%cat(ifelse(length(templateData[["transformCols"]])>0,paste(sapply(templateData[["transformCols"]],stringQuote),collapse=","),"NULL"))%>)
transformCofactor = <%cat(ifelse(length(templateData[["transformCols"]])>0,templateData[["transformCofactor"]],"NULL"))%>

scaleColumns = c(<%cat(ifelse(length(templateData[["scaleCols"]])>0,paste(sapply(templateData[["scaleCols"]],stringQuote),collapse=","),"NULL"))%>)


minimumClusterSizePercent = <%cat(templateData[["minimumClusterSizePercent"]])%>
modelTypes = c(<% cat(paste(sapply(templateData[["classificationModels"]],stringQuote),collapse=",")) %>)
fileSampleSize = <% cat(templateData[["fileSampleSize"]]) %>
nFolds = <%cat(templateData[["crossValidationFolds"]]) %>
featureType = c(<%cat(stringQuote(templateData[["featureType"]]))%>)
fileList = data.frame(<%
                        if (templateData[["preload"]]){
                          labelAssignments=templateData[["keyFile"]]
                        } else {
                          selectedFiles = getSelectedFiles(input)
                          labelAssignments = convertToLabeledFileList(selectedFiles)
                        }
                        labelCol = which(colnames(labelAssignments)=="labels")
                        labels = labelAssignments[,labelCol]
                        labelAssignments = labelAssignments[,-labelCol,drop=F]
                        cat(paste(sapply(colnames(labelAssignments),convertColToDefinition,df=labelAssignments),collapse=",\n"))
                      %>)
labels = as.factor(c(<%cat(paste(sapply(labels,stringQuote),collapse=","))%>))

<% if (templateData[["preload"]]){
  cat(
    paste(
      "conditionComparaMatrix = matrix(c(",
                                         paste(as.vector(templateData[["conditionComparaMatrix"]]),collapse=","),
                              "), ncol=",
                                         length(templateData[["conditions"]]),
                                ",nrow=",
                                         length(templateData[["conditions"]]),
                                ",dimnames=list(c(",
                                          paste(sapply(templateData[["conditions"]],stringQuote),collapse=","),
                                "),c(",
                                          paste(sapply(templateData[["conditions"]],stringQuote),collapse=","),
                                ")))",
                                sep=""))
}%>

results = citrus.full(
            fileList=fileList,
            labels=labels,
            clusteringColumns=clusteringColumns,
            dataDirectory=dataDirectory,
            outputDirectory=outputDirectory,
            family=family,
            modelTypes=modelTypes,
            nFolds=nFolds,
            <% if ("conditionComparaMatrix" %in% names(templateData)){cat("conditionComparaMatrix=conditionComparaMatrix,")} %>
            fileSampleSize=fileSampleSize,
            featureType=featureType,
            minimumClusterSizePercent=minimumClusterSizePercent,
            transformColumns=transformColumns,
            transformCofactor=transformCofactor,
            scaleColumns=scaleColumns
            <% if ("medianColumns" %in% names(templateData)){cat(",medianColumns=medianColumns")} %>
)

# plot results
plot.citrus.full.result(results,outputDirectory)

# ==================================================================================================
# The following lines perform the same analysis as the citrus.full() function but broken down
# into component steps. This is may be more useful to run if you plan on running the clustering
# once but examining many endpoints, features, or minimum cluster sizes. You should uncomment 
# the clustering, feature extraction, regression, and plotting functionlines. 
# ==================================================================================================

# Read Data
# citrus.combinedFCSSet = citrus.readFCSSet(dataDirectory,fileList,fileSampleSize,transformColumns,transformCofactor)

# Cluster all the data
# citrus.foldClustering = citrus.clusterAndMapFolds(citrus.combinedFCSSet,clusteringColumns,labels,nFolds)

# OR load a previous clustering result. All other variables must be set by previous lines in runCitrus.R
# load(file.path(outputDirectory,"citrusClustering.rData"))

# Make vector of conditions for analysis. If comparing two conditions, should be 
# two elements - first element is baseline condition and second is comparison condition.
# conditions = colnames(fileList)[1]

# Build cluster features
# citrus.foldFeatureSet = citrus.calculateFoldFeatureSet(citrus.foldClustering,citrus.combinedFCSSet,
#                                                         featureType=featureType,
#                                                         minimumClusterSizePercent=minimumClusterSizePercent,
#                                                         conditions=conditions<% if ("medianColumns" %in% names(templateData)){cat(",\n#                                                         medianColumns=medianColumns")} %>
#                                                         )

# Build regression models for each model type
# citrus.regressionResults = mclapply(modelTypes,citrus.endpointRegress,citrus.foldFeatureSet=citrus.foldFeatureSet,labels=labels,family=family)

# Plot Results for each model
# lapply(citrus.regressionResults,plot.citrus.regressionResult,outputDirectory=outputDirectory,citrus.foldClustering=citrus.foldClustering,citrus.foldFeatureSet=citrus.foldFeatureSet,citrus.combinedFCSSet=citrus.combinedFCSSet)
